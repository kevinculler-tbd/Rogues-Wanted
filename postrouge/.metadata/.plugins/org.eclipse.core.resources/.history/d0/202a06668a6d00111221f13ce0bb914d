package main.java.stateEngines;

import com.googlecode.blacken.terminal.BlackenKeys;

import main.java.actions.AbstractAction;
import main.java.actions.LookAction;
import main.java.actions.MoveAction;
import main.java.actors.DisplayObject;
import main.java.actors.ActorObjects.AbstractActorObject;
import main.java.actors.ActorObjects.TargetingIcon;
import main.java.actors.LevelObjects.AbstractMapObject;
import main.java.stateEngines.LevelEngine.LevelInputState;
import main.java.util.PlayerSessionUtil;

public class TargetingEngine extends AbstractEngine{
	
	enum TargetingInputState{UP, DOWN, LEFT, RIGHT, QUIT, BACK, CONFIRM, NONE};

	private AbstractAction targetFor;
	private AbstractActorObject targetIcon;
	
	public TargetingEngine(AbstractEngine lstEng) {
		super(lstEng);
		// TODO Auto-generated constructor stub
	}
	public TargetingEngine(AbstractEngine lstEng, AbstractAction act) {
		super(lstEng);
		targetIcon = new TargetingIcon();
		targetFor = act;
		
		// TODO Auto-generated constructor stub
	}

	@Override
	public DisplayObject[][] getDisplayMap() {
		lastEngine.getDisplayMap();
		return null;
	}

	@Override
	public String getOutputText() {
		String targetDiscription = targetIcon.getEnvironment().getDiscription();
		
		if(!targetIcon.getEnvironment().getPossessions().isEmpty()){
			targetDiscription = targetDiscription + " containing";
		}
		
		for ( AbstractActorObject actor: targetIcon.getEnvironment().getPossessions()){
			if(actor.getDiscription() !=null){
				targetDiscription = targetDiscription+" :"+actor.getDiscription();
			}
		}
		
		
		return targetDiscription;
	}

	@Override
	public AbstractEngine takeStep() {
		LevelInputState state = doInput();
	
		AbstractEngine ret = this;
		int curY = PlayerSessionUtil.getPlayerSession().getPlayer().getY();
		int curX = PlayerSessionUtil.getPlayerSession().getPlayer().getX();
		AbstractAction action;
		AbstractMapObject target;
		switch(state){
		case QUIT:
			ret = new QuitEngine(this);
			break;
		case UP:
			action = new MoveAction();
			target = PlayerSessionUtil.getPlayerSession().getMapObjectAtCord(curX, curY-1);
			break;
		case DOWN:
			action = new MoveAction();
			target = PlayerSessionUtil.getPlayerSession().getMapObjectAtCord(curX, curY+1);
			break;
		case LEFT:
			action = new MoveAction();
			target = PlayerSessionUtil.getPlayerSession().getMapObjectAtCord(curX-1, curY);
			break;
		case RIGHT:
			action = new MoveAction();
			target = PlayerSessionUtil.getPlayerSession().getMapObjectAtCord(curX+1, curY);
			break;
		}
		
		return ret;
	}
	
	private LevelInputState doInput(){
		int ch = getInput();
		LevelInputState state = LevelInputState.NONE;
		 switch(ch) {
         case BlackenKeys.KEY_F01:
        	 state = TargetingInputState.QUIT;
         	break;
         case BlackenKeys.KEY_UP:
        	 state = TargetingInputState.UP;
         	break;
         case BlackenKeys.KEY_DOWN:
        	 state = TargetingInputState.DOWN;
         	break;
         case BlackenKeys.KEY_LEFT:
        	 state = TargetingInputState.LEFT;
         	break;
         case BlackenKeys.KEY_RIGHT:
        	 state = TargetingInputState.RIGHT;
         	break;
         case BlackenKeys.KEY_ESCAPE:
        	 state = TargetingInputState.

}
