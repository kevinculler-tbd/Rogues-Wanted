package main.java.util;

import main.java.Model.LevelMap;
import main.java.actors.ActorObjects.Player;
import main.java.actors.LevelObjects.AbstractMapObject;
import main.java.actors.LevelObjects.FloorTile;
import main.java.actors.LevelObjects.HorizontalWall;
import main.java.actors.LevelObjects.VerticalWall;

public class PlayerSessionUtil {
	public enum Property{BLOCKING,ENTANGLING,FIRE,ICE,WATER}
	
	private Player player;
	private static PlayerSessionUtil playerSession;
	
	private LevelMap lobbyMap;
	private LevelMap currentMap;
	
	
	public static PlayerSessionUtil getPlayerSession() {
		if(playerSession == null){
			playerSession = new PlayerSessionUtil();
		}
		
		return playerSession;
	}
	
	public PlayerSessionUtil(){
		makeLobby();
	}

	public Player getPlayer() {
		return player;
	}

	public void setPlayer(Player player) {
		this.player = player;
	}

	public LevelMap getLobbyMap() {
		return lobbyMap;
	}

	public void setLobbyMap(LevelMap lobbyMap) {
		this.lobbyMap = lobbyMap;
	}
	
	private void makeLobby(){
		lobbyMap = new LevelMap();
		lobbyMap.setMaxX(DisplayUtil.SCREEN_WIDTH*2);
		lobbyMap.setMaxY(DisplayUtil.SCREEN_HEIGHT*2);

		AbstractMapObject[][] tMap = new AbstractMapObject[lobbyMap.getMaxX()][lobbyMap.getMaxY()];
		
		for(int y = 0; y<lobbyMap.getMaxY(); ++y){
			
			for(int x = 0; x<lobbyMap.getMaxX(); ++x){
				if(y==0||y == lobbyMap.getMaxY()-1 ){
					tMap[x][y] = new HorizontalWall(x,y);
				}else{
					if(x==0 || x==lobbyMap.getMaxX()-1){
						tMap[x][y] = new VerticalWall(x, y);
					}else{
						tMap[x][y] = new FloorTile(x, y);
					}
				}
			}
		}
		
		lobbyMap.setMap(tMap);
		currentMap=lobbyMap;
	}

	public LevelMap getCurrentMap() {
		return currentMap;
	}

	public void setCurrentMap(LevelMap currentMap) {
		this.currentMap = currentMap;
	}
	
	public AbstractMapObject getMapObjectAtCord(int x, int y){
		if(currentMap.getMap().length>0){
			return currentMap.getMap()[y*currentMap.getMaxX()+x];
		}
		
		return null;
	}

	
	
	
	
	
}
